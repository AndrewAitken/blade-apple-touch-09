import React from "react";
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Send } from "lucide-react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useToast } from "@/hooks/use-toast";

// Phone input masking function
const formatPhoneNumber = (value: string) => {
  if (!value) return "";

  // Remove all non-digit characters
  const phoneNumber = value.replace(/\D/g, "");

  // Format according to the mask
  if (phoneNumber.length === 0) {
    return "";
  } else if (phoneNumber.length <= 1) {
    return `+7`;
  } else if (phoneNumber.length <= 4) {
    return `+7 (${phoneNumber.slice(1, 4)}`;
  } else if (phoneNumber.length <= 7) {
    return `+7 (${phoneNumber.slice(1, 4)}) ${phoneNumber.slice(4, 7)}`;
  } else if (phoneNumber.length <= 9) {
    return `+7 (${phoneNumber.slice(1, 4)}) ${phoneNumber.slice(4, 7)}-${phoneNumber.slice(7, 9)}`;
  } else {
    return `+7 (${phoneNumber.slice(1, 4)}) ${phoneNumber.slice(4, 7)}-${phoneNumber.slice(7, 9)}-${phoneNumber.slice(9, 11)}`;
  }
};

const formSchema = z.object({
  name: z.string().min(2, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤"),
  phone: z.string().min(10, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
  email: z.string().email("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email").optional().or(z.literal("")),
  comment: z.string().min(1, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
});

interface CTAFormProps {
  onSuccess?: () => void;
}

const CTAForm = ({ onSuccess }: CTAFormProps) => {
  const { toast } = useToast();
  
  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      phone: "",
      email: "",
      comment: "",
    }
  });

  const onSubmit = async (data: any) => {
    try {
      // Process the phone number before submission (remove formatting)
      const cleanedPhone = data.phone.replace(/\D/g, "");
      const phoneForSubmission = cleanedPhone.length > 0 ? `+${cleanedPhone}` : "";
      
      const submissionData = {
        ...data,
        phone: phoneForSubmission
      };
      
      console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ CTA —Ñ–æ—Ä–º—É:", submissionData);

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –±–æ—Ç @wash_up_cleaning_bot
      await fetch("https://api.telegram.org/bot7252849088:AAHCQfLWz-YyxY227f15HhJGzqvjydDe_cY/sendMessage", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          chat_id: "393097451",
          text: `üßº –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ CleanHub (–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä):\n–ò–º—è: ${data.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phoneForSubmission}\nEmail: ${data.email || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment}`
        })
      });

      toast({
        title: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
        description: "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
        variant: "default"
      });

      form.reset();
      onSuccess?.();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:", error);
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        variant: "destructive"
      });
    }
  };

  // Handle phone input with masking
  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>, onChange: (value: string) => void) => {
    const formattedValue = formatPhoneNumber(e.target.value);
    onChange(formattedValue);
  };

  return (
    <div className="text-center mb-6">
      <h3 className="text-2xl font-bold mb-2">–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</h3>
      <p className="text-brand-gray/80">
        –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
      </p>
      
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 mt-6">
          <FormField 
            control={form.control} 
            name="name" 
            render={({ field }) => (
              <FormItem>
                <FormLabel>–ò–º—è*</FormLabel>
                <FormControl>
                  <Input placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )} 
          />
          
          <FormField 
            control={form.control} 
            name="phone" 
            render={({ field }) => (
              <FormItem>
                <FormLabel>–¢–µ–ª–µ—Ñ–æ–Ω*</FormLabel>
                <FormControl>
                  <Input 
                    placeholder="+7 (999) 123-45-67" 
                    value={field.value}
                    onChange={(e) => handlePhoneChange(e, field.onChange)}
                    onBlur={field.onBlur}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )} 
          />
          
          <FormField 
            control={form.control} 
            name="email" 
            render={({ field }) => (
              <FormItem>
                <FormLabel>Email</FormLabel>
                <FormControl>
                  <Input placeholder="example@mail.ru" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )} 
          />
          
          <FormField 
            control={form.control} 
            name="comment" 
            render={({ field }) => (
              <FormItem>
                <FormLabel>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*</FormLabel>
                <FormControl>
                  <Textarea 
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–±—ä–µ–∫—Ç–µ, –ø–ª–æ—â–∞–¥–∏, —Ç–∏–ø–µ —É–±–æ—Ä–∫–∏..." 
                    className="min-h-[100px]"
                    {...field} 
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )} 
          />
          
          <Button type="submit" className="btn-primary w-full">
            <Send size={18} className="mr-2" /> –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏
          </Button>
        </form>
      </Form>
    </div>
  );
};

export default CTAForm;
